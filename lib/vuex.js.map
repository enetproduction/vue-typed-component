{"version":3,"file":"vuex.js","sourceRoot":"","sources":["../src/vuex.ts"],"names":[],"mappings":";AAAA,2BAA6B;AAc5B,CAAC;AA8CW,QAAA,WAAW,GAAiB,UAAC,OAA+B,IAAK,OAAA,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAvB,CAAuB,CAAC","sourcesContent":["import * as Vuex from \"vuex\";\r\n\r\n/*\r\n * Meaning of generic types\r\n *  S : State\r\n *  M : Mutations\r\n *  A : Actions\r\n *  G : Getters\r\n */\r\n\r\nexport type Payload<T, V> = { type: T } & V;\r\nexport interface Dispatch<A> {\r\n    <K extends keyof A>(payload: Payload<K, A[K]>, options?: Vuex.DispatchOptions): Promise<any[]>;\r\n    <K extends keyof A>(type: K, payload: A[K], options?: Vuex.DispatchOptions): Promise<any[]>;\r\n};\r\nexport interface Commit<M> {\r\n    <K extends keyof M>(payload: Payload<K, M[K]>, options?: Vuex.CommitOptions): void;\r\n    <K extends keyof M>(type: K, payload: M[K], options?: Vuex.CommitOptions): void;\r\n}\r\nexport interface ActionContext<S, M, A, G> extends Vuex.ActionContext<S, any> {\r\n    dispatch: Dispatch<A>;\r\n    commit: Commit<M>;\r\n    getters: G;\r\n}\r\n\r\nexport type Mutations<S, M> = {\r\n    [K in keyof M]: (state: S, payload: M[K]) => any;\r\n} & Vuex.MutationTree<S>;\r\n\r\nexport type Actions<S, M, A, G> = {\r\n    [K in keyof A]: (injectee: ActionContext<S, M, A, G>, payload: A[K]) => any;\r\n} & Vuex.ActionTree<S, any>;\r\n\r\nexport type Getters<S, G> = {\r\n    [K in keyof G]: (state: S, getters: G, rootState: any, rootGetters: any) => G[K];\r\n} & Vuex.GetterTree<S, any>;\r\n\r\nexport interface StoreOptionsM<S, M> extends Vuex.StoreOptions<S> {\r\n    mutations: Mutations<S, M>;\r\n}\r\nexport interface StoreOptionsMA<S, M, A> extends StoreOptionsM<S, M> {\r\n    actions: Actions<S, M, A, undefined>;\r\n}\r\nexport interface StoreOptionsMAG<S, M, A, G> extends StoreOptionsM<S, M> {\r\n    actions: Actions<S, M, A, G>;\r\n    getters: Getters<S, G>;\r\n}\r\n\r\nexport interface Store<S, M, A, G> extends Vuex.Store<S> {\r\n    commit: Commit<M>;\r\n    dispatch: Dispatch<A>;\r\n    getters: G;\r\n}\r\n\r\nexport interface $CreateStore {\r\n    <S, M> (options: StoreOptionsM<S, M>): Store<S, M, undefined, undefined>;\r\n    <S, M, A> (options: StoreOptionsMA<S, M, A>): Store<S, M, A, undefined>;\r\n    <S, M, A, G> (options: StoreOptionsMAG<S, M, A, G>): Store<S, M, A, G>;\r\n}\r\n\r\nexport const createStore: $CreateStore = (options: Vuex.StoreOptions<any>) => new Vuex.Store(options);\r\n"]}